def extended_gcd(a, b):
    if b == 0:
        return a, 1, 0
    gcd, x1, y1 = extended_gcd(b, a % b)
    x = y1
    y = x1 - (a // b) * y1
    return gcd, x, y

def modular_inverse(e, f_n):
    gcd, x, y = extended_gcd(e, f_n)
    if gcd != 1:
        raise ValueError(f"The inverse of {e} modulo {f_n} does not exist.")
    else:
        return x % f_n

# Given values
e = 31
f_n = 3480

# Find modular inverse of e mod f(n)
d = modular_inverse(e, f_n)
print("Private key d:", d)

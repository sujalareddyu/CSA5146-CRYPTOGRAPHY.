import numpy as np

# Function to encrypt plaintext using Hill cipher with a 2x2 key matrix
def hill_encrypt(plaintext, key):
    n = len(plaintext)
    # Padding if necessary to make length even
    if n % 2 != 0:
        plaintext += 'X'
        n += 1
    
    ciphertext = []
    for i in range(0, n, 2):
        pair = plaintext[i:i+2]
        p = np.array([[ord(pair[0]) - ord('A')], [ord(pair[1]) - ord('A')]])
        c = np.dot(key, p) % 26
        ciphertext.append(chr(c[0][0] + ord('A')))
        ciphertext.append(chr(c[1][0] + ord('A')))
    
    return ''.join(ciphertext)

# Function to decrypt ciphertext using Hill cipher with a 2x2 key matrix
def hill_decrypt(ciphertext, key):
    n = len(ciphertext)
    plaintext = []
    for i in range(0, n, 2):
        pair = ciphertext[i:i+2]
        c = np.array([[ord(pair[0]) - ord('A')], [ord(pair[1]) - ord('A')]])
        k_inv = np.linalg.inv(key)
        p = np.dot(k_inv, c) % 26
        plaintext.append(chr(int(p[0][0]) + ord('A')))
        plaintext.append(chr(int(p[1][0]) + ord('A')))
    
    return ''.join(plaintext)

# Function to perform a known plaintext attack on Hill cipher with 2x2 key matrix
def known_plaintext_attack(plaintexts, ciphertexts):
    num_samples = len(plaintexts)
    if num_samples < 2:
        raise ValueError("At least 2 plaintext-ciphertext pairs are required for known plaintext attack.")
    
    # Initialize matrices for plaintexts and ciphertexts
    P = np.zeros((2, num_samples), dtype=int)
    C = np.zeros((2, num_samples), dtype=int)
    
    # Fill matrices with letter indices
    for i in range(num_samples):
        P[0][i] = ord(plaintexts[i][0]) - ord('A')
        P[1][i] = ord(plaintexts[i][1]) - ord('A')
        C[0][i] = ord(ciphertexts[i][0]) - ord('A')
        C[1][i] = ord(ciphertexts[i][1]) - ord('A')
    
    # Solve the system of equations to find the key matrix K
    K = np.dot(C, np.linalg.inv(P)) % 26
    K = K.astype(int)
    
    return K

def main():
    # Example of known plaintext-ciphertext pairs
    plaintexts = ['HELLO', 'WORLD']
    key = np.array([[6, 5], [1, 3]])  # Example key matrix K for demonstration
    ciphertexts = [hill_encrypt(p, key) for p in plaintexts]
    
    # Perform known plaintext attack
    recovered_key = known_plaintext_attack(plaintexts, ciphertexts)
    
    print("Recovered Key Matrix K:")
    print(recovered_key)
    
    # Validate by decrypting using the recovered key
    for p, c in zip(plaintexts, ciphertexts):
        decrypted_text = hill_decrypt(c, recovered_key)
        print(f"Plaintext: {p} -> Ciphertext: {c} -> Decrypted: {decrypted_text}")

if __name__ == "__main__":
    main()

import random
import math

def generate_large_prime(bits):
    while True:
        prime_candidate = random.getrandbits(bits)
        if is_prime(prime_candidate):
            return prime_candidate

def is_prime(n, k=30):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    r = 0
    d = n - 1
    while d % 2 == 0:
        d //= 2
        r += 1
    for _ in range(k):
        a = random.randint(2, n - 2)
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

def generate_rsa_keypair(bits):
    p = generate_large_prime(bits // 2)
    q = generate_large_prime(bits // 2)
    n = p * q
    phi_n = (p - 1) * (q - 1)
    e = 65537  # Typically chosen as the public exponent
    d = modular_inverse(e, phi_n)
    return (e, d, n)

def modular_inverse(a, m):
    m0, x0, x1 = m, 0, 1
    if m == 1:
        return 0
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    if x1 < 0:
        x1 += m0
    return x1

# Example usage to generate a new RSA key pair
new_bits = 1024  # Replace with desired key size in bits
new_public_key, new_private_key, new_modulus = generate_rsa_keypair(new_bits)

print("New RSA Key Pair:")
print("Public Key (e):", new_public_key)
print("Private Key (d):", new_private_key)
print("Modulus (n):", new_modulus)

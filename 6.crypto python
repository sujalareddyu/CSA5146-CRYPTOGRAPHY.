import string

# Function to calculate modular inverse of a modulo m
def mod_inverse(a, m):
    m0, x0, x1 = m, 0, 1
    if m == 1:
        return 0
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    if x1 < 0:
        x1 += m0
    return x1

# Function to break affine cipher given the most frequent and second most frequent letters
def break_affine_cipher(freq_letter1, freq_letter2):
    # Determine positions of the most frequent and second most frequent letters
    idx1 = ord(freq_letter1.lower()) - ord('a')
    idx2 = ord(freq_letter2.lower()) - ord('a')
    
    # Known plaintext positions
    p1 = 4  # Position of 'e'
    p2 = 20  # Position of 'u'
    
    # Known ciphertext positions
    c1 = idx1
    c2 = idx2
    
    possible_results = []
    
    # Try different values of a and find corresponding b
    for a in range(1, 26):
        if math.gcd(a, 26) != 1:
            continue
        
        # Calculate modular inverse of a
        a_inv = mod_inverse(a, 26)
        
        # Check if a_inv exists (i.e., gcd(a, 26) == 1)
        if a_inv is None:
            continue
        
        # Calculate b1 and b2 using the known pairs
        b1 = (c1 - (a * p1)) % 26
        b2 = (c2 - (a * p2)) % 26
        
        # Check if b1 and b2 are valid
        if b1 == b2:
            possible_results.append((a, b1))
    
    return possible_results

# Function to decrypt ciphertext using affine cipher parameters
def affine_caesar_decrypt(ciphertext, a, b):
    plaintext = []
    a_inv = mod_inverse(a, 26)
    for char in ciphertext:
        if char.isalpha():
            if char.islower():
                c = ord(char) - ord('a')
                p = (a_inv * (c - b)) % 26
                plaintext.append(chr(p + ord('a')))
            elif char.isupper():
                c = ord(char) - ord('A')
                p = (a_inv * (c - b)) % 26
                plaintext.append(chr(p + ord('A')))
        else:
            plaintext.append(char)
    return ''.join(plaintext)

# Main function to break the affine cipher
def main():
    # Given most frequent and second most frequent letters in the ciphertext
    freq_letter1 = 'B'
    freq_letter2 = 'U'
    
    # Break the affine cipher
    results = break_affine_cipher(freq_letter1, freq_letter2)
    
    if not results:
        print("Unable to break the cipher with the given information.")
    else:
        print(f"Possible values for (a, b) are:")
        for a, b in results:
            print(f"a = {a}, b = {b}")
            # Replace with actual ciphertext
            ciphertext = "Ciphertext goes here"
            decrypted_text = affine_caesar_decrypt(ciphertext, a, b)
            print(f"Decrypted text: {decrypted_text}")

if __name__ == "__main__":
    main()
